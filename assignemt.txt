#include <iostream>
#include <string>
#include <queue>
#include <unordered_map>
#include <bitset>

using namespace std;

// Node structure for Huffman Tree
struct HuffmanNode {
    char data;
    unsigned freq;
    HuffmanNode *left, *right;

    HuffmanNode(char data, unsigned freq) : data(data), freq(freq), left(nullptr), right(nullptr) {}
};

// Comparison object for priority queue
struct Compare {
    bool operator()(HuffmanNode* l, HuffmanNode* r) {
        return l->freq > r->freq;
    }
};
// Function to build Huffman Tree and return root
HuffmanNode* buildHuffmanTree(const string& text) {
    // Count frequency of each character
    unordered_map<char, unsigned> freqMap;
    for (char ch : text) {
        freqMap[ch]++;
    }

    // Create priority queue (min heap)
    priority_queue<HuffmanNode*, vector<HuffmanNode*>, Compare> minHeap;

    // Create leaf nodes and add to min heap
    for (auto pair : freqMap) {
        minHeap.push(new HuffmanNode(pair.first, pair.second));
    }

    // Build Huffman Tree
    while (minHeap.size() != 1) {
        // Extract two nodes with minimum frequency
        HuffmanNode* left = minHeap.top();
        minHeap.pop();

        HuffmanNode* right = minHeap.top();
        minHeap.pop();

        // Create internal node with sum of frequencies
        HuffmanNode* internal = new HuffmanNode('\0', left->freq + right->freq);
        internal->left = left;
        internal->right = right;

        minHeap.push(internal);
    }

    return minHeap.top();
}
// Traverse Huffman Tree and generate codes
void generateCodes(HuffmanNode* root, string code, unordered_map<char, string>& huffmanCode) {
    if (root == nullptr) return;

    // Leaf node
    if (!root->left && !root->right) {
        huffmanCode[root->data] = code;
    }

    generateCodes(root->left, code + "0", huffmanCode);
    generateCodes(root->right, code + "1", huffmanCode);
}

// Encode the input text using Huffman codes
string encodeText(const string& text, const unordered_map<char, string>& huffmanCode) {
    string encodedText;
    for (char ch : text) {
        encodedText += huffmanCode.at(ch);
    }
    return encodedText;
}
// Compress the encoded binary string to bytes
vector<uint8_t> compress(const string& encodedText) {
    vector<uint8_t> compressed;
    string buffer;

    for (size_t i = 0; i < encodedText.size(); i += 8) {
        string byteStr = encodedText.substr(i, 8);
        // Pad with zeros if needed
        if (byteStr.size() < 8) {
            byteStr.append(8 - byteStr.size(), '0');
        }
        uint8_t byte = bitset<8>(byteStr).to_ulong();
        compressed.push_back(byte);
    }

    return compressed;
}

// Main compression function
pair<unordered_map<char, string>, vector<uint8_t>> huffmanCompress(const string& text) {
    // Build Huffman Tree
    HuffmanNode* root = buildHuffmanTree(text);

    // Generate Huffman Codes
    unordered_map<char, string> huffmanCode;
    generateCodes(root, "", huffmanCode);

    // Encode text
    string encodedText = encodeText(text, huffmanCode);

    // Compress to bytes
    vector<uint8_t> compressed = compress(encodedText);

    return {huffmanCode, compressed};
}
// Function to print compression statistics
void printStats(const string& original, const vector<uint8_t>& compressed,
                const unordered_map<char, string>& huffmanCode) {
    size_t originalSize = original.size() * 8; // in bits (assuming 1 byte per char)
    size_t compressedSize = compressed.size() * 8;
    size_t tableSize = 0;

    // Calculate size of code table (approximate)
    for (const auto& pair : huffmanCode) {
        tableSize += 8 + pair.second.size(); // char (1 byte) + code length in bits
    }


cout << "Original size: " << originalSize << " bits\n";
    cout << "Compressed size: " << compressedSize << " bits\n";
    cout << "Code table size: " << tableSize << " bits\n";
    cout << "Total compressed size: " << (compressedSize + tableSize) << " bits\n";
    cout << "Compression ratio: "
         << (double)(compressedSize + tableSize) / originalSize * 100 << "%\n";

    cout << "\nHuffman Codes:\n";
for (const auto& pair : huffmanCode) {
        cout << "'" << pair.first << "' : " << pair.second << "\n";
    }
}

int main() {
    string text = "this is an example for huffman encoding";

    cout << "Original text: " << text << "\n\n";

    auto [huffmanCode, compressed] = huffmanCompress(text);

    printStats(text, compressed, huffmanCode);

    return 0;
}
